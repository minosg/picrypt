#!/usr/bin/env python

"""autocompile: Compile Helper for PiCrypt Code..."""

import os
import re
import sys
import shutil
import argparse
from random import randint
from subprocess import call, Popen, PIPE

__author__ = "Minos Galanakis"
__license__ = "GPL v3"
__version__ = "0.0.1"
__email__ = "minos197@gmail.com"
__project__ = "picrypt"
__date__ = "01-07-2016"

__pi_revisions__ = {"0xa01041": "2", '0xa02082': "3"}
__protection_lvs__ = ["CARE_BEAR",
                      "SCRIPT_KIDDY",
                      "ARCH_USER",
                      "PEN_TESTER",
                      "TIN_FOIL_HAT"]


def run(cmd):
    """ Run a command to system and return its stdout """

    p = Popen(cmd, shell=True, stdout=PIPE, stderr=PIPE)
    ret, err = p.communicate()
    if not p.returncode:
        return ret.strip()
    else:
        raise RuntimeError(err)


def get_cpu_serial():
    """Extract the cpu serial"""

    with open("/proc/cpuinfo", "r") as F:
        s = re.search(r'(?:[0]{8})([a-z0-9]{8})', F.read()).group(1)
    return s


def reset_machine_id():
    """ Reset the software id for the host machine """

    ref_mid = get_machine_id()
    for f in ["/etc/machine-id", "/var/lib/dbus/machine-id"]:
        try:
            os.remove(f)
        except OSError as e:
            print(e.message)
            continue
    call("/bin/systemd-machine-id-setup 2> /dev/null", shell=True)
    print("Changed id from %s to: %s" % (ref_mid, get_machine_id()))
    exit(0)


def get_machine_id():
    """Return the unique software id"""

    with open("/etc/machine-id", "r") as F:
        return F.read().strip()


def get_revision():
    """ Determine pi board's revision """

    with open('/proc/cmdline', 'r') as f:
        line = f.readline()
    m = re.search('bcm270[0-9].boardrev=(0x[0123456789abcdef]*)', line)
    try:
        revision = ""
        revision = m.group(1)
        return __pi_revisions__[revision]
    except Exception as e:
        print("Did not find revision %s" % revision)
        raise ValueError(e)


def scan_dir(dir):
    """ Recursively list a directory's files """

    dir_list = []
    for root, directories, filenames in os.walk(dir):
        for filename in filenames:
            dir_list.append(os.path.join(root, filename))
    return dir_list


def choose_file():
    file_seed = scan_dir("/etc/") +\
                scan_dir("/usr/bin/") +\
                scan_dir("/usr/lib/")
    uinp = ""
    print("Created a pool of %d files." % len(file_seed))
    while (uinp != "y"):
        r_idx = randint(0, len(file_seed)-1)
        try:
            uinp = raw_input("Selected %s,Accept? Yes/ Retry/ Abort"
                             " ? (y/r/a): " % file_seed[r_idx])
        except KeyboardInterrupt:
            sys.exit(1)
        uinp = uinp.strip().lower()
        if uinp == "a":
            sys.exit(1)
        if uinp == "r":
            continue
    usr_file = file_seed[r_idx]
    usr_fpath, usr_fname = os.path.split(usr_file)
    test_file = usr_fname.split(".")

    base_name = test_file[0]
    i = 0
    # Try to create a small variant of the file that does not exist.
    while True:
        try:
            lst_digit = int(base_name[-1]) + i
            new_name = base_name[:-1] + ("%d" % lst_digit)
            if (i > 10):
                new_name = base_name[:-1] + ("%d" % randint(10, 100))

        # The name does not end in a number
        except ValueError:
            new_name = base_name + ("%d" % randint(0, 10))

        # Check if the new file exists
        test_file[0] = new_name
        new_file = os.path.join(usr_fpath, ".".join(test_file))
        print("Trying name: %s %s " % (test_file, new_file))
        if os.path.isfile(new_file):
            i += 1
            continue
        break
    print("Copying %s as %s and using the new name as a seed" % (usr_file,
                                                                 new_file))
    shutil.copy(usr_file, new_file)
    return new_file


def get_sha1(file_path):
    """ Return the sha1 checksum of the file in the path"""

    if not os.path.isfile(file_path):
        return None
    cmd = ["sha1sum %s | awk '{print $1}'" % file_path]
    ret, err = Popen(cmd, shell=True, stdout=PIPE, stderr=PIPE).communicate()
    if ret:
        return ret.strip()
    else:
        return None


def get_serials(uar):
    """Extract the cpu serial"""

    # Compile for current hardware
    # Placeholder for future multi-binary compillation support.

    pli = __protection_lvs__.index(uar.protection)
    fkser = uar.fake_serial
    hwd_lst = []

    rev = get_revision() if not fkser else "3"
    ser = fkser if fkser else get_cpu_serial() if pli >= 1 else None
    mid = get_machine_id() if pli >= 2 else None
    keyf = uar.keyfile if uar.keyfile else choose_file() if pli >= 3 else None
    sha1 = get_sha1(keyf) if keyf else None if pli >= 3 else None
    hwd_entry = (rev, ser, mid, keyf, sha1)
    # Always build for current Harware
    hwd_lst.append(hwd_entry)
    # TODO parse the folder for configuration files and add them to list
    if uar.bulk:
        pass

    return hwd_lst


def gcc_compile(source,
                output,
                piver,
                protection="CARE_BEAR",
                hwid=None,
                machid=None,
                keyfile=None,
                sha1=None,
                lhash=None,
                fserial=None,
                devel=None):
    """ Populate the authorized_hwd file and call make """

    prot_level_int = __protection_lvs__.index(protection)
    prot_lv = protection if protection in __protection_lvs__ else "CARE_BEAR"

    # Compile the header file for current build
    hwd_text = "#ifndef _HW_AUTH_H_\n#define _HW_AUTH_H_\n"
    hwd_text += '#define %s %s\n' % ("PI_VER", piver)
    hwd_text += '#define %s %s\n' % ("PROTECTION", prot_lv)
    if hwid:
        hwd_text += ('#define %s'
                     ' "%s"\n') % ("HWD_ID", fserial if fserial else hwid)
    if machid and prot_level_int >= 2:
        hwd_text += '#define %s "%s"\n' % ("MACHINE_ID", machid)
    if (keyfile and sha1) and prot_level_int >= 3:
        hwd_text += '#define %s "%s"\n' % ("FILE_SEED", keyfile)
        hwd_text += '#define %s "%s"\n' % ("FILE_SHA1", sha1)
    hwd_text += '#define %s 0x%x\n' % ("_STRHT_USR_SALT", randint(0, 128))
    if fserial:
        hwd_text += '#define %s 0x%s\n' % ("FAKE_SERIAL", fserial)
    if lhash:
        hwd_text += '#define %s\n' % ("LONG_HASH")
    if devel:
        hwd_text += '#define %s\n' % ("DEVEL")
    hwd_text += "#endif"

    with open(hwd, "w") as F:
        F.write(hwd_text)
    # Compile the binary
    cmd = "make devel" if devel else "make"
    ret = run(cmd)
    call("cp picrypt %s" % output, shell=True)
    print("Compiled %s" % output)
    return ret


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--reset",
                        "-r",
                        help="Reset current units machine-id",
                        dest="reset",
                        action="store_true")
    parser.add_argument("--compile",
                        "-c",
                        help="Compile all",
                        dest="compile",
                        action="store_true")
    parser.add_argument("--keyfile",
                        "-k",
                        help="Use file as sha1 keyfile",
                        dest="keyfile",
                        action="store")
    parser.add_argument("--lhash",
                        "-l",
                        help="create double length password",
                        dest="lhash",
                        action="store_true")
    parser.add_argument("--nobackup",
                        "-n",
                        help="Remove authorized_hardware.h and don't restore",
                        dest="nobackup",
                        action="store_true")
    parser.add_argument("--fake",
                        "-f",
                        help="Add a fake serial to detection method",
                        dest="fake_serial",
                        action="store")
    parser.add_argument("--devel",
                        "-d",
                        help="Executable will print out auth failures",
                        dest="devel",
                        action="store_true")
    parser.add_argument("--protection",
                        "-p",
                        help="Set the protection level",
                        default="PEN_TESTER",
                        dest="protection",
                        action="store")
    parser.add_argument("--bulk",
                        "-b",
                        help="Set Bulk compile directory (Not Implemented)",
                        dest="bulk",
                        action="store")
    usr_args = parser.parse_args()

    if usr_args.compile:
        # Set-up
        working_dir = os.getcwd()
        source_dir = os.path.abspath("./")
        source = os.path.join(source_dir, "picrypt.c")
        hwd = os.path.join(source_dir, "authorized_hwd.h")
        hwd_backup = os.path.join(source_dir, "authorized_hwd.h.back")
        compile_dir = os.path.join(working_dir, "bin")

        # Reset if a reset flag is passed through
        if usr_args.reset:
            print("Reseting machine-id")
            reset_machine_id()

        serials = get_serials(usr_args)

        # Compile the files
        if os.path.isfile(source) and serials:
            print("Using Source file %s" % source)
            run("mkdir -p %s" % compile_dir)
            run("rm -rf %s/./*" % compile_dir)

            # Make a backup of hwd_backup
            try:
                shutil.move(hwd, hwd_backup)
                backup_present = True
            except IOError:
                backup_present = False
            # Inverting the logic ensures .h file will be erased
            if usr_args.nobackup:
                backup_present = False
            for rev, ser, mid, key_f, sha in serials:
                b_name = "picrypt_%s" % ser
                b_path = os.path.join(compile_dir, b_name)
                gcc_compile(source=source,
                            output=b_path,
                            piver=rev,
                            protection=usr_args.protection,
                            hwid=ser,
                            machid=mid,
                            keyfile=key_f,
                            sha1=sha,
                            lhash=usr_args.lhash,
                            fserial=usr_args.fake_serial,
                            devel=usr_args.devel)

            # cleanup
            if backup_present:
                shutil.move(hwd_backup, hwd)
        else:
            print("Error with source: %s and serials: %s" % (source,
                                                             repr(serials)))
            sys.exit(1)
    elif usr_args.reset:
        print("Reseting machine-id")
        reset_machine_id()
        sys.exit(0)
    else:
        parser.print_help()
